@page "/sportsman"
@page "/sportsman/{id:int}"
@inject ISportsmanService SportsmanService
@inject ISportService SportService
@inject NavigationManager navigationManager

@if (Id == null)
{
    <PageTitle>Add new sportsman</PageTitle>
    <h1>Добавте нового спортсмена до вашого довідника </h1>
}
else
{
    <PageTitle>Edit sportsman</PageTitle>
        <h1>Edit  @middleName</h1>
}
@if (Id != null)
{
    <button class="btn alert-success" @onclick="PreviousSportsman"><i class ="oi oi-arrow-left"></i></button>
    <button class="btn alert-success" @onclick="NextSportsman"><i class ="oi oi-arrow-right"></i></button>

}
<EditForm Model="sportsman" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
   <div class="col-6">
       <label>  name</label>
       <InputText id="firstName" @bind-Value="sportsman.FirstName" class="form-control" ></InputText>
       <ValidationMessage For="@(()=>sportsman.FirstName)"></ValidationMessage>
   </div>
   <div class="col-6">
       <label>Last name</label>
       <InputText id="lastName" @bind-Value="sportsman.LastName" class="form-control" ></InputText>
       <ValidationMessage For="@(()=>sportsman.LastName)"></ValidationMessage>

   </div>
   <div class="col-6">
       <label>Birth date</label>
       <InputDate id="birthDate" @bind-Value="sportsman.BirthDate" class="form-control" ></InputDate>
       <ValidationMessage For="@(()=>sportsman.BirthDate)"></ValidationMessage>

   </div>
   <div class="col-6">
       <label>Age</label>
       <InputNumber id="age" @bind-Value="sportsman.Age" class="form-control"></InputNumber>
       <ValidationMessage For="@(()=>sportsman.Age)"></ValidationMessage>

   </div>
    <div class="col-6">
       <label>Height</label>
       <InputNumber id="height" @bind-Value="sportsman.Height" class="form-control" ></InputNumber>
       <ValidationMessage For="@(()=>sportsman.Height)"></ValidationMessage>

   </div> 
   <div class="col-6">
       <label>Weight</label>
       <InputNumber id="weight" @bind-Value="sportsman.Weight" class="form-control" ></InputNumber>
       <ValidationMessage For="@(()=>sportsman.Weight)"></ValidationMessage>

   </div> 
    <div class="col-6">
       <label>Citizenship</label>
       <InputSelect id="Citizenship" @bind-Value="sportsman.CitizenshipId" class="form-control" >
            @foreach(var sport in SportsmanService.Citizenships)
            {
                <option value="@sport.Id">@sport.Name</option>
            }
       </InputSelect>
       <ValidationMessage For="@(()=>sportsman.CitizenshipId)"></ValidationMessage>

   </div>
   <div class="col-6">
       <label>Sport</label>
       <InputSelect id="sport" @bind-Value="sportsman.SportId" class="form-select">
            @foreach(var sport in SportService.Sports)
            {
                <option value="@sport.Id">@sport.Name</option>
            }
        </InputSelect>
       <ValidationMessage For="@(()=>sportsman.Sport)"></ValidationMessage>

   </div>
   <div class="col-6">
       <label>Team</label>
       <InputText id="team" @bind-Value="sportsman.Team" class="form-control"></InputText>
       <ValidationMessage For="@(()=>sportsman.Team)"></ValidationMessage>

   </div>
   <br/>
   <button type="submit" class="btn btn-primary">@btnText</button>
    @if (Id != null)
    {
    <button type="button" class = "btn btn-danger" @onclick="DeleteSportsman">Видалити спортсмена</button>
        
    }
</EditForm>



@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;
    string middleName = string.Empty;
    Sportsman sportsman = new Sportsman {Sport=new Sport()};
    protected override async void OnInitialized()
    {
        btnText = Id == null ? "Зберегти нового спортсмена" : "Змінити дані спортсмена";
        await SportService.GetSports();
        await SportsmanService.GetCitizenships();

    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {

            sportsman.CitizenshipId = 1;
            sportsman.SportId = 1;

        }
        else
        {
            sportsman = await SportsmanService.GetSingleSportsman((int)Id);
            middleName = sportsman.FirstName + " " + sportsman.LastName;
        }
    }
    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await SportsmanService.CreateSportsman(sportsman);
        }
        else
        {
            await SportsmanService.UpdateSportsman(sportsman);
        }
    }
    async Task DeleteSportsman()
    {
        await SportsmanService.DeleteSportsman(sportsman.Id);
    }
    void PreviousSportsman()
    {
        var prev = (from x in SportsmanService.Sportsmen  where x.Id < Id orderby x.Id descending select x).FirstOrDefault();
        if (prev != null)
        {
        navigationManager.NavigateTo($"/sportsman/{prev.Id}");
            
        }
    }
    void NextSportsman()
    {
        var next = (from x in SportsmanService.Sportsmen where x.Id > Id orderby x.Id ascending select x).FirstOrDefault();
        if (next!=null)
        {
        navigationManager.NavigateTo($"/sportsman/{next.Id}");
            
        }
    }



}
